// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
// Beginning of the user, role, and permission models

model User {
  id                          String         @id @default(uuid())
  name                        String
  signupMethod                SignupMethod
  email                       String?        @unique
  phone                       String?        @unique
  passwordHash                String?
  isActive                    Boolean        @default(true)
  isVerified                  Boolean        @default(false)
  profile                     Profile?
  roles                       UserRole[]
  driver                      Driver?
  customer                    Customer?
  admin                       Admin?
  googleId                    String?
  facebookId                  String?
  createdAt                   DateTime       @default(now())
  updatedAt                   DateTime       @updatedAt
  deletedAt                   DateTime?
  passwordChangedAt           DateTime?
  jwtIssuedAt                 DateTime?
  passwordResetToken          String?
  passwordResetTokenExpiresIn DateTime?
  refreshToken                RefreshToken[]
  otpToken                    OtpToken[]
}

model RefreshToken {
  id         String   @id @default(uuid())
  token      String   @unique
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  expiresAt  DateTime
  revoked    Boolean  @default(false)
  device     String? // e.g. "iPhone 14 Pro", "Samsung Galaxy S22", "Web Chrome"
  ipAddress  String? // optional: capture IP at login
  userAgent  String // optional: capture browser/device info
  appVersion String?

  @@unique([userId, userAgent])
}

model OtpToken {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  reason    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
  token     String

  @@unique([userId, reason])
}

model Profile {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Driver {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Quote     Quote[]
}

model Customer {
  id              String            @id @default(uuid())
  userId          String            @unique
  user            User              @relation(fields: [userId], references: [id])
  requestForQuote RequestForQuote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Admin {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id          String           @id @default(uuid())
  name        String           @unique
  description String?
  users       UserRole[]
  permissions RolePermission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserRole {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  role   Role   @relation(fields: [roleId], references: [id])
  roleId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, roleId])
}

model Permission {
  id          String           @id @default(uuid())
  key         String           @unique
  name        String
  description String?
  module      String
  roles       RolePermission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RolePermission {
  id           String     @id @default(uuid())
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       String
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([roleId, permissionId])
}

////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
// Beginning of the location, request for quote, quote and booking models

model Location {
  id        String  @id @default(uuid())
  address   String?
  city      String?
  state     String?
  country   String?
  latitude  Float
  longitude Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  pickupRequests  RequestForQuote[] @relation("PickupLocation")
  dropoffRequests RequestForQuote[] @relation("DropoffLocation")
}

model RequestForQuote {
  id               String    @id @default(uuid())
  pickupTime       DateTime
  pickupLocationId String
  pickupLocation   Location  @relation("PickupLocation", fields: [pickupLocationId], references: [id])
  dropLocationId   String
  dropLocation     Location  @relation("DropoffLocation", fields: [dropLocationId], references: [id])
  pickupDate       DateTime
  status           RFQStatus @default(OPEN)
  customerId       String
  customer         Customer  @relation(fields: [customerId], references: [id])
  quotes           Quote[] // one RFQ can have many quotes from drivers
  package          Package[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Package {
  id                String          @id @default(uuid())
  description       String?
  weight            Float?
  dimensions        String? // e.g. "20x30x15 cm"
  fragile           Boolean         @default(false)
  requestForQuoteId String
  requestForQuote   RequestForQuote @relation(fields: [requestForQuoteId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Quote {
  id                String          @id @default(uuid())
  price             Float
  message           String?
  requestForQuoteId String
  requestForQuote   RequestForQuote @relation(fields: [requestForQuoteId], references: [id])
  driver            Driver          @relation(fields: [driverId], references: [id])
  driverId          String
  status            QuoteStatus     @default(DRAFT)
  estimatedTime     DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

enum QuoteStatus {
  DRAFT
  SAVED
  ACCEPTED
  EXPIRED
}

enum RFQStatus {
  OPEN
  CLOSED
  CANCELLED
}

enum UserType {
  CUSTOMER
  DRIVER
  ADMIN
}

enum CustomerType {
  B2C
  B2B
  STUDENT
}

enum SignupMethod {
  NORMAL
  GOOGLE
  APPLE
}
