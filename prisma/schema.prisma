// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String       @id @default(uuid())
  name               String
  signupMethod       SignupMethod
  email              String? @unique
  phone              String? @unique
  passwordHash       String?
  isActive           Boolean      @default(true)
  isVerified         Boolean      @default(false)
  profile            Profile?
  roles              UserRole[]
  driver             Driver?
  customer           Customer?
  admin              Admin?
  googleId           String?
  facebookId         String?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  deletedAt          DateTime?
  passwordChangedAt  DateTime?
  jwtIssuedAt        DateTime?
  passwordResetToken String?
}

model Profile {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Driver {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Customer {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Admin {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Role {
  id          String           @id @default(uuid())
  name        String           @unique
  description String?
  users       UserRole[]
  permissions RolePermission[]
}

model UserRole {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  role   Role   @relation(fields: [roleId], references: [id])
  roleId String

  @@unique([userId, roleId])
}

model Permission {
  id          String           @id @default(uuid())
  name        String           @unique
  description String?
  module      String
  roles       RolePermission[]
}

model RolePermission {
  id           String     @id @default(uuid())
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       String
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String

  @@unique([roleId, permissionId])
}

enum UserType {
  CUSTOMER
  DRIVER
  ADMIN
}

enum CustomerType {
  B2C
  B2B
  STUDENT
}

enum SignupMethod {
  NORMAL
  GOOGLE
  APPLE
}
