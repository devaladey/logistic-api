// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "./ERD.svg"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
// Beginning of the user, role, and permission models

model User {
  id                          String         @id @default(uuid())
  name                        String
  signupMethod                SignupMethod
  email                       String?        @unique
  phone                       String?        @unique
  passwordHash                String?
  isActive                    Boolean        @default(true)
  isVerified                  Boolean        @default(false)
  profile                     Profile?
  roles                       UserRole[]
  driver                      Driver?
  customer                    Customer?
  admin                       Admin?
  blogs                       Blog[]
  googleId                    String?
  facebookId                  String?
  createdAt                   DateTime       @default(now())
  updatedAt                   DateTime       @updatedAt
  deletedAt                   DateTime?
  passwordChangedAt           DateTime?
  jwtIssuedAt                 DateTime?
  passwordResetToken          String?
  passwordResetTokenExpiresIn DateTime?
  refreshToken                RefreshToken[]
  otpToken                    OtpToken[]
  userReviewsGiven            Review[]       @relation("UserReviewsGiven")
  userReviewsReceived         Review[]       @relation("UserReviewsReceived")
  blogComments                BlogComment[]
}

model RefreshToken {
  id         String   @id @default(uuid())
  token      String   @unique
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  expiresAt  DateTime
  revoked    Boolean  @default(false)
  device     String? // e.g. "iPhone 14 Pro", "Samsung Galaxy S22", "Web Chrome"
  ipAddress  String? // optional: capture IP at login
  userAgent  String // optional: capture browser/device info
  appVersion String?

  @@unique([userId, userAgent])
}

model OtpToken {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  reason    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
  token     String

  @@unique([userId, reason])
}

model Profile {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Driver {
  id           String           @id @default(uuid())
  userId       String           @unique
  user         User             @relation(fields: [userId], references: [id])
  booking      Booking[]
  vehicle      Vehicle[]
  trackingLogs TrackingUpdate[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Quote     Quote[]
}

model Customer {
  id              String            @id @default(uuid())
  userId          String            @unique
  user            User              @relation(fields: [userId], references: [id])
  requestForQuote RequestForQuote[]
  booking         Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Admin {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id          String           @id @default(uuid())
  name        String           @unique
  description String?
  users       UserRole[]
  permissions RolePermission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserRole {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  role   Role   @relation(fields: [roleId], references: [id])
  roleId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, roleId])
}

model Permission {
  id          String           @id @default(uuid())
  key         String           @unique
  name        String
  description String?
  module      String
  roles       RolePermission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RolePermission {
  id           String     @id @default(uuid())
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       String
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([roleId, permissionId])
}

////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
// Beginning of the location, request for quote, quote and booking models

model Location {
  id        String  @id @default(uuid())
  address   String?
  city      String?
  state     String?
  country   String?
  latitude  Float
  longitude Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  pickupRequests  RequestForQuote[] @relation("PickupLocation")
  dropoffRequests RequestForQuote[] @relation("DropoffLocation")
}

model RequestForQuote {
  id               String    @id @default(uuid())
  pickupTime       DateTime
  pickupLocationId String
  pickupLocation   Location  @relation("PickupLocation", fields: [pickupLocationId], references: [id])
  dropLocationId   String
  dropLocation     Location  @relation("DropoffLocation", fields: [dropLocationId], references: [id])
  pickupDate       DateTime
  status           RFQStatus @default(OPEN)
  customerId       String
  customer         Customer  @relation(fields: [customerId], references: [id])
  quotes           Quote[] // one RFQ can have many quotes from drivers
  package          Package[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Package {
  id                String           @id @default(uuid())
  description       String?
  weight            Float?
  dimensions        String? // e.g. "20x30x15 cm"
  fragile           Boolean          @default(false)
  requestForQuoteId String
  requestForQuote   RequestForQuote  @relation(fields: [requestForQuoteId], references: [id])
  status            PackageStatus    @default(QUOTED)
  BookingPackage    BookingPackage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BookingPackage {
  id                  String                 @id @default(uuid())
  description         String?
  weight              Float?
  dimensions          String? // e.g. "20x30x15 cm"
  fragile             Boolean                @default(false)
  originalPackage     Package?               @relation(fields: [originalPackageId], references: [id])
  originalPackageId   String?
  bookingId           String                 @unique
  booking             Booking                @relation(fields: [bookingId], references: [id])
  packageTrackingLogs PackageTrackingEvent[]
}

model Quote {
  id                String          @id @default(uuid())
  price             Float
  message           String?
  requestForQuoteId String
  requestForQuote   RequestForQuote @relation(fields: [requestForQuoteId], references: [id])
  driver            Driver          @relation(fields: [driverId], references: [id])
  driverId          String
  status            QuoteStatus     @default(DRAFT)
  booking           Booking?
  estimatedTime     DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model Booking {
  id             String          @id @default(uuid())
  customerId     String
  customer       Customer        @relation(fields: [customerId], references: [id])
  driverId       String
  driver         Driver          @relation(fields: [driverId], references: [id])
  quoteId        String          @unique
  quote          Quote           @relation(fields: [quoteId], references: [id])
  vehicleId      String?
  vehicle        Vehicle?        @relation(fields: [vehicleId], references: [id])
  bookingPackage BookingPackage?
  status         BookingStatus   @default(PENDING)
  scheduledAt    DateTime
  invoice        Invoice?
  // payent         Payment         

  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  paymentId    String
  Payment      Payment?
  Cancellation Cancellation?    @relation("BookingCancellation")
  trackingLogs TrackingUpdate[]
  reviews      Review[]
  invoiceId    String
}

model TrackingUpdate {
  id        String  @id @default(uuid())
  booking   Booking @relation(fields: [bookingId], references: [id])
  bookingId String

  driver   Driver @relation(fields: [driverId], references: [id])
  driverId String

  latitude  Float
  longitude Float
  timestamp DateTime @default(now())
}

model Vehicle {
  id String @id @default(uuid())

  // Relationship
  driver   Driver @relation(fields: [driverId], references: [id])
  driverId String

  // Basic info
  type        VehicleType // enum: BIKE, CAR, VAN, TRUCK
  plateNumber String      @unique
  make        String? // e.g., Toyota, Honda
  model       String? // e.g., Corolla, Civic
  year        Int?
  color       String?

  // Capacity & specs
  capacityKg  Float? // max weight in kg
  capacityVol Float? // max volume in cubic meters
  fuelType    String? // e.g., Petrol, Diesel, Electric

  // Legal / compliance
  insuranceDoc String? // URL or path to uploaded doc
  regDoc       String? // vehicle registration doc
  roadWorthy   Boolean @default(false) // approved by admin?

  // Tracking
  status       VehicleStatus @default(ACTIVE)
  gpsEnabled   Boolean       @default(false)
  lastKnownLat Float?
  lastKnownLng Float?
  lastCheckIn  DateTime?

  // Lifecycle
  bookings  Booking[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Payment {
  id        String        @id @default(uuid())
  bookingId String        @unique
  booking   Booking       @relation(fields: [bookingId], references: [id])
  amount    Float
  currency  String
  method    PaymentMethod
  status    PaymentStatus @default(PENDING)

  providerTxnId String? // e.g. Stripe/PayPal/Klarna transaction ID
  dueDate       DateTime? // for invoices
  paidAt        DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  refund    Refund[]
  invoice   Invoice  @relation(fields: [invoiceId], references: [id])
  invoiceId String
}

model Invoice {
  id        String        @id @default(uuid())
  booking   Booking       @relation(fields: [bookingId], references: [id])
  bookingId String        @unique
  amount    Float
  currency  String        @default("USD")
  status    InvoiceStatus @default(PENDING)
  issuedAt  DateTime      @default(now())
  dueDate   DateTime?
  paidAt    DateTime?
  payments  Payment[]
}

model Refund {
  id        String  @id @default(uuid())
  paymentId String
  payment   Payment @relation(fields: [paymentId], references: [id])

  amount        Float
  reason        RefundReason
  status        RefundStatus @default(PENDING)
  providerTxnId String? // Stripe/PayPal refund ID
  processedAt   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cancellation {
  id        String   @id @default(uuid())
  bookingId String   @unique
  reason    String?
  // cancelledBy UserRole  // "CUSTOMER", "DRIVER", "ADMIN"
  createdAt DateTime @default(now())

  // Relation back to Booking
  booking Booking @relation("BookingCancellation", fields: [bookingId], references: [id])
}

model PackageTrackingEvent {
  id               String               @id @default(uuid())
  bookingPackage   BookingPackage       @relation(fields: [bookingPackageId], references: [id])
  bookingPackageId String
  status           BookingPackageStatus
  lat              Float?
  lng              Float?
  timestamp        DateTime             @default(now())
  note             String?
}

model Review {
  id        String   @id @default(uuid())
  rating    Int // 1–5 stars
  comment   String? // optional written feedback
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  reviewerId String
  reviewer   User   @relation("UserReviewsGiven", fields: [reviewerId], references: [id])

  revieweeId String
  reviewee   User   @relation("UserReviewsReceived", fields: [revieweeId], references: [id])

  bookingId String? // link to a specific order/delivery
  booking   Booking? @relation(fields: [bookingId], references: [id])

  @@unique([bookingId, reviewerId, revieweeId])
}

model Blog {
  id           String            @id @default(uuid())
  title        String
  slug         String            @unique
  content      String
  publishedAt  DateTime?
  authorId     String
  author       User              @relation(fields: [authorId], references: [id])
  categoryId   String?
  category     BlogCategory?     @relation(fields: [categoryId], references: [id])
  tags         BlogTag[]         @relation("BlogTagsOnBlog")
  translations BlogTranslation[]
  comments     BlogComment[]
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
}

model BlogCategory {
  id    String @id @default(uuid())
  name  String @unique
  blogs Blog[]
}

model BlogTag {
  id    String @id @default(uuid())
  name  String @unique
  blogs Blog[] @relation("BlogTagsOnBlog")
}

model BlogTranslation {
  id       String @id @default(uuid())
  blogId   String
  blog     Blog   @relation(fields: [blogId], references: [id])
  language String // e.g. "en", "de", "fr"
  title    String
  content  String
}

model BlogComment {
  id        String        @id @default(uuid())
  blogId    String
  blog      Blog          @relation(fields: [blogId], references: [id])
  authorId  String
  author    User          @relation(fields: [authorId], references: [id])
  content   String
  parentId  String? // for nested replies
  parent    BlogComment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   BlogComment[] @relation("CommentReplies")
  createdAt DateTime      @default(now())
}

enum InvoiceStatus {
  PENDING
  PAID
  PARTIALLY_PAID
  CANCELLED
}

enum BookingPackageStatus {
  PENDING
  PICKED_UP
  IN_TRANSIT
  AT_WAREHOUSE
  OUT_FOR_DELIVERY
  DELIVERED
  RETURNED
  LOST
}

enum RefundReason {
  CUSTOMER_CANCELLATION
  PROVIDER_CANCELLATION
  SERVICE_ISSUE
  PARTIAL_REFUND
  OTHER
}

enum RefundStatus {
  PENDING
  SUCCESS
  FAILED
}

enum PaymentMethod {
  CARD
  PAYPAL
  SEPA
  KLARNA
  APPLE_PAY
  GOOGLE_PAY
  INVOICE // Rechnung (postpaid)
  CASH
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
  OVERDUE
}

enum VehicleStatus {
  ACTIVE
  INACTIVE
  UNDER_MAINTENANCE
  BLOCKED
}

enum VehicleType {
  BIKE
  CAR
  VAN
  TRUCK
  BICYCLE
  LORRY
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_TRANSIT
  DELIVERED
  CANCELLED
  DRIVER_ASSIGNED
  PICKED_UP
  FAILED
}

enum PackageStatus {
  PENDING
  QUOTED
  BOOKED
  IN_TRANSIT
  DELIVERED
  DAMAGED
  LOST
  CANCELED
}

enum QuoteStatus {
  DRAFT
  SAVED
  ACCEPTED
  EXPIRED
}

enum RFQStatus {
  OPEN
  CLOSED
  CANCELLED
}

enum UserType {
  CUSTOMER
  DRIVER
  ADMIN
}

enum CustomerType {
  B2C
  B2B
  STUDENT
}

enum SignupMethod {
  NORMAL
  GOOGLE
  APPLE
}
